---
- name: Ensure installation directory exists
  win_file:
    path: "{{ install_dir }}"
    state: directory
    mode: '0755'

- name: Check if elastic agent zip is already downloaded
  win_stat:
    path: "{{ elastic_agent_zip }}"
  register: agentzip_stat

- name: Download Elastic Agent
  win_get_url:
    url: "{{ elastic_agent_url }}"
    dest: "{{ elastic_agent_zip }}"
  when: not agentzip_stat.stat.exists

- name: Check if elastic agent is present
  win_stat:
    path: "{{ install_dir }}/elastic_agent.exe"
  register: agent_stat

# - name: Get agent onto target
#   win_copy:
#     src: "{{ elastic_agent_zip }}"
#     dest: "{{ install_dir }}/"

- name: Extract Elastic Agent
  win_unzip:
    src: "{{ elastic_agent_zip }}"
    dest: "{{ install_dir }}"
    remote_src: yes
  when: not agent_stat.stat.exists

- name: Check if elastic agent is already installed
  win_stat:
    path: "C:\\Program Files\\Elastic\\Agent\\elastic-agent.exe"
  register: agentinstall_stat

- name: Uninstall Elastic Agent
  win_shell: | 
    echo Y | & "C:\\Program Files\\Elastic\\Agent\\elastic-agent.exe" uninstall
  when: agentinstall_stat.stat.exists
  register: uninstall_stat

- name: Check for cluster health; wait 120 seconds for health status
  win_shell: |
    curl.exe -XGET -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} \
    'http://{{ elk_host }}:5601/api/fleet/package_policies' -H 'Content-Type: application/json' \
    -H 'kbn-xsrf: true'
  run_once: true

- name: Fetch enrollment API keys
  win_shell: |
    curl.exe -XGET -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} \
    'http://{{ elk_host }}:5601/api/fleet/enrollment-api-keys' -H 'Content-Type: application/json' \
    -H 'kbn-xsrf: true'
  register: result
  run_once: true

# - name: Fetch enrollment API keys
#   win_uri:
#     url: "http://{{ elk_host }}:5601/api/fleet/enrollment-api-keys"
#     method: GET
#     user: "{{ es_api_basic_auth_username }}"
#     password: "{{ es_api_basic_auth_password }}"
#     force_basic_auth: yes
#     return_content: yes
#   register: result
#   run_once: true

- name: Pause for 15 seconds
  ansible.builtin.pause:
    seconds: 15
  when: uninstall_stat

- name: Extract api_key for specific policy_id
  set_fact:
    api_key: "{{ result.json.list | selectattr('policy_id', 'equalto', 'agent-policy') | map(attribute='api_key') | first }}"
  run_once: true

- name: Install Elastic Agent
  # Since I am using self-signed certificate, I have added "--insecure" flag at the end.
  win_shell: | 
    echo Y | & "{{ install_dir }}\elastic-agent-{{ elastic_agent_version }}-windows-x86_64\elastic-agent.exe" install --url=http://"{{ elk_host }}":8220 --enrollment-token="{{ api_key }}" --insecure -f
  when: not agentinstall_stat.stat.exists or uninstall_stat

# - name: Clean up the downloaded zip file
#   win_file:
#     path: "{{ elastic_agent_zip }}"
#     state: absent